// <auto-generated />
using System;
using GymManagement_Members_Microservice.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GymManagement_Members_Microservice.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251021210551_forcedDefaultDates")]
    partial class forcedDefaultDates
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GymManagement_Members_Microservice.Models.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("ActiveUntilDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CONVERT(date, DATEADD(month, 1, GETUTCDATE()))");

                    b.Property<bool>("DebitActive")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateOnly>("RegisterDay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("CONVERT(date, GETUTCDATE())");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasFilter("[Phone] IS NOT NULL");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("GymManagement_Members_Microservice.Models.MemberDiscount", b =>
                {
                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RemainingMonths")
                        .HasColumnType("int");

                    b.HasKey("MemberId");

                    b.ToTable("MemberDiscounts");
                });

            modelBuilder.Entity("GymManagement_Members_Microservice.Models.MemberDiscount", b =>
                {
                    b.HasOne("GymManagement_Members_Microservice.Models.Member", "Member")
                        .WithOne("MemberDiscount")
                        .HasForeignKey("GymManagement_Members_Microservice.Models.MemberDiscount", "MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("GymManagement_Members_Microservice.Models.Member", b =>
                {
                    b.Navigation("MemberDiscount");
                });
#pragma warning restore 612, 618
        }
    }
}
